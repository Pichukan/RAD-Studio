unit WordActivate;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, System.Win.ComObj, Winapi.ActiveX, TlHelp32, ShellAPI,
  Vcl.Samples.Spin, Vcl.ComCtrls, Vcl.Menus, Vcl.ExtCtrls;

type
  TForm1 = class(TForm)
    Button2: TButton;
    OpenDialog1: TOpenDialog;
    Label1: TLabel;
    ProgressBar1: TProgressBar;
    Label2: TLabel;
    MainMenu1: TMainMenu;
    MenuFile: TMenuItem;
    MenuHelp: TMenuItem;
    AboutProgram: TMenuItem;
    WhatDo: TMenuItem;
    Author: TMenuItem;
    ExitP: TMenuItem;
    Help1: TMenuItem;
    Help2: TMenuItem;
    Help3: TMenuItem;
    Start: TMenuItem;
    Image1: TImage;


    procedure Button2Click(Sender: TObject);
    procedure AuthorClick(Sender: TObject);
    procedure WhatDoClick(Sender: TObject);


  //  procedure Label1Click(Sender: TObject);
  //  procedure Label2Click(Sender: TObject);




  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  WRD,Book,BookPicture,BookObzor,BookAnalog,BookLocation,
      BookBlevantone,RangeBookBlevantone,wdInlineShapes,wdInlineShapes2: OleVariant;
  EXC,MyBook,MyWorkSheet,MyWorkSheet2,MyRange,MyRange2,RangeObzor,
      Shp,ShpWrd,ShpWrd2,ShpWrd3,vstart,vend: OleVariant;
  var W,ObzorValue:variant;
                 i:Integer;
        LengthDir : Integer;
        ProgBar   : Integer;
  var DIRFName    : string;
  var DIRName     : string;
  var  DirExName  : string;
  var NewWordDocDir: string;
  var FileFormat  : OleVariant;
  var ProgramName : string;
  var  DIRFile    : string;
  var  Label2C     : string;

implementation

{$R *.dfm}

//*************** проверка наличия действующего процесса EXCEL ****************
function GetProcessByEXE(exename: string): THandle;
var
  hSnapshoot: THandle;
  pe32: TProcessEntry32;
begin
  Result:= 0;
  hSnapshoot:= CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
  if (hSnapshoot = 0) then Exit;
  pe32.dwSize:= SizeOf(TProcessEntry32);
  if (Process32First(hSnapshoot, pe32)) then
    repeat
      if (pe32.szExeFile = exename) then
      begin
        Result:= pe32.th32ProcessID;
        exit;
      end;
    until not Process32Next(hSnapshoot, pe32);
end;

//***************** проверка установлен ли EXCEL ************************
function  ExistExcel: Boolean;
   var
   ID:TCLSID;
   Res: HRESULT;
begin
    Res:= CLSIDFromProgID('Excel.Application',ID);
     if Res=S_OK then
     Result:= True
     else
     Result:= False;
end;

//************** проверка установлен ли WORD **********************************
function  ExistWORD: Boolean;
   var
   ID:TCLSID;
   Res: HRESULT;
begin
    Res:= CLSIDFromProgID('Word.Application',ID);
     if Res=S_OK then
     Result:= True
     else
     Result:= False;
end;

//************* функция запуска приложения из запущенного EXCEL ***********************************

function RunExcel: Boolean;
begin

  if GetProcessByEXE('Excel.EXE')<>0 then

  begin
  EXC:=GetActiveOLEObject('Excel.Application');
  Result:=true;
  end
  else
  Result:= false;
  end;


//*********************** функция запуска приложения из запущенного WORD *******************************
function RunWORD: Boolean;
begin

  if GetProcessByEXE('WORD.EXE')<>0 then

  begin
  WRD:=GetActiveOLEObject('Word.Application');
  Result:=true;
  end
  else
  Result:= false;
  end;

//*********************** функция запуска приложения EXCEL *********************
  function StartExcel: boolean;
 begin
    if ExistExcel then
    begin
    if RunExcel=false then
    EXC:=CreateOleObject('Excel.Application');
    result:=True;
    end
    else
    begin
    ShowMessage('Майкрософт Excel не установлен на данном компютере');
     result:=False;
    end;
 end;


//*********************** функция запуска приложения WORD *******************************
 function StartWORD: boolean;
 begin
    if ExistWORD then
    begin
    if RunWORD=false then
    WRD:=CreateOleObject('Word.Application');
    result:=True;
    end
    else
    begin
    ShowMessage('Майкрософт WORD не установлен на данном компютере');
     result:=False;
    end;
 end;

 //**** определяется директория с названием файла без расширения  но с точкой ****************
 function DIRDetect: string;

 var

 Smb      : Char;
 i ,L       : Integer;
 DIRECTORY: string;

 begin


        DIRECTORY:=DIRFname;
   {
        while (Smb<>'.') do
          begin
          Smb:=DIRFname[i];
          DIRECTORY:=DIRECTORY+Smb;
          i:=i+1;
          end;
      }

       L:=Length(DIRFname);
        i:=L;
        Smb:=DIRFname[i];

        while (Smb<>'.') do
          begin
             i:=i-1;
             Smb:=DIRFname[i];
          end;

          Delete(DIRECTORY, i+1, l-i);


       result:=DIRECTORY;

 end;

//****************** определяется директория папки без названия файла **************
 function DIRFileDetect: string;

 var

 Smb         : Char;
 i , L       : Integer;
 DIRECTORY   : string;

 begin
        DIRECTORY:=' ';
        DIRECTORY:=DIRFname;
        L:=Length(DIRFname);
        i:=L;
        Smb:=DIRFname[i];

        while (Smb<>'\') do
          begin
             i:=i-1;
             Smb:=DIRFname[i];
          end;

          Delete(DIRECTORY, i+1, l-i);
          LengthDir:=  Length(DIRECTORY);

          result:=DIRECTORY;

 end;


 // ***************** функция ищет в ВОРДЕ заданный текст по всему документу ************************************************
 // *****************         и дает на него ссылка объект range             *******************************
  function FindInDoc(const aWdDoc : OleVariant; const aSearchText : String) : oleVariant;
const
  wdFindStop = 0; //Завершить поиск при достижении границы диапазона.
var
  wdRng, wdFind : OleVariant;
begin
  VarClear(Result);
  //Диапазон, охватывающий всё содержимое документа.
  wdRng := aWdDoc.Content;
  //Настройка поиска.
  wdFind := wdRng.Find;
  //wdFind.ClearFormatting;
  wdFind.Text := aSearchText;
  //True - поиск вести от начала - к концу диапазона.
  wdFind.Forward := True;
  //wdFindStop - завершить поиск при достижении границы диапазона.
  //wdFind.Wrap := wdFindStop;
  //Поиск текста.
  if wdFind.Execute then Result := wdRng;
end;


//******** Процедура открытия документа EXCEL по заданному пути **************************************************************
procedure ActExcelOpenDoc;
begin
 {
  if StartExcel then
   begin
    ShowMessage('Процесс Excel запущен');
   end;
  }
  DIRExName:=DIRName+'xlsm';
//  ShowMessage('Процесс Excel открывается');
  MyBook:= EXC.WorkBooks.Open(DIRExName);  //Открываем документ
//  ShowMessage(DIRExName);   //Показывает директорию открытого файла с именем и расширением

end;


//********** Процедура запускает МАКРОС EXCEL копирующий таблицы как рисунки  ***********
//********** на листе EXCEL и вставляющий их там же, и затем процедура эти    ***********
//********** рисунки вставляет в документ WORD на заданные места путем замены ***********
//********** заданного текста                                                 ***********
procedure TableAsPicturePaste(Book : OleVariant);
  var  ReplaceText : array [1..10] of string;
                 j : Integer;

  begin
   //   ShowMessage('0');
    //  EXC.Run('PERSONAL.XLSB!ТаблКакРис');
    //  EXC.Run('ТКР');
    //  EXC.Run('ТаблКакРис');
   //  ShowMessage('000');
   //  Sleep(1000);
     MyWorkSheet:=MyBook.Sheets['Таблицы расч'];

   //  ShowMessage('001');
   //  Sleep(500);
     Shp := MyWorkSheet.Shapes.Item(1);
    //  MyRange:=EXC.Range['a2'];
    //   Book.Activate;
    // MyRange2:=EXC.Range['h1'];
    //  Book.Range(1,10).Paste;
    //  ShowMessage('0002');
     ReplaceText [1]:='1#1';        //заменяемый на таблицы текст в WORD
     ReplaceText [2]:='1#2';        //заменяемый на таблицы текст в WORD
     ReplaceText [3]:='1#3';        //заменяемый на таблицы текст в WORD
     ReplaceText [4]:='1#4';        //заменяемый на таблицы текст в WORD
     ReplaceText [5]:='1#5';        //заменяемый на таблицы текст в WORD
     ReplaceText [6]:='1#6';        //заменяемый на таблицы текст в WORD

     j:=1;

     repeat
      //ShowMessage('002');
        Shp := MyWorkSheet.Shapes.Item(j);
        Shp.Copy;
      //ShowMessage('111');
        MyRange2 := FindInDoc(Book, ReplaceText [j]);

       if VarIsClear(MyRange2) then begin
          ShowMessage('Текст НЕ найден.');
          Exit;
       end;

         MyRange2.Select;      //Выделяем найденный текст.
         MyRange2.Paste;       //Заменяем найденный текст из буфера обмена.

        j:= j+1;
     until ReplaceText [j]  = '';

   //ShowMessage('рисунки из ЭКЗЕЛЬ вставлены');

  end;

//******* Процедура вставляет  рисунки из документа WORD   ********
//******* в другой документ в заданные места               ********
//******* (в данном случае это Зад. и Акт осмотра          ********
procedure InsertPictureWord(Book : OleVariant);
 var
 ReplaceText   : array [1..5] of string;
 DirPictureDoc : string;
 i,j             : Integer;

begin
  DirPictureDoc:= DIRFile+'доки.docx';
  BookPicture:=WRD.Documents.Open(DirPictureDoc);
 // ShowMessage('файл доки открыт');

   ReplaceText [1]:='1##1';
   ReplaceText [2]:='1##2';
   ReplaceText [3]:='1##3';
   ReplaceText [4]:='';

    j:=BookPicture.InlineShapes.Count;
    //(IntToStr(j));


             ShpWrd2:= BookPicture.Range.InlineShapes;
             ShpWrd2.Item(1).select;
             WRD.selection.Copyaspicture;

 //  ShpWrd2:= BookPicture.Range.InlineShapes;
 //  ShpWrd:= ShpWrd2.Item(1).Range;
 //   ShpWrd.CopyAsPicture;
  // BookPicture.Range.InlineShapes.Item(1).Range.CopyAsPicture;
   MyRange2 := FindInDoc(Book, ReplaceText [1]);

    if  VarIsClear(MyRange2) then begin
        ShowMessage('Текст 1##1 НЕ найден.');
        Exit;
    end;

     MyRange2.Paste;

 //**************************************************************

    ProgBar:=43;
    Form1.ProgressBar1.Position := ProgBar ;
    Label2C:='вставил Задание, пихаю Акт осмотра в документ';
    Form1.Label2.Caption:=Label2C;

 //************************************************************
  //    i:=2;
     for i:=2 to 4  do
       begin
        //    j:=BookPicture.InlineShapes.Count;
        //   ShpWrd2:= BookPicture.Range.InlineShapes;
        //   ShpWrd:= ShpWrd2.Item(i).Range;
        //   ShpWrd.CopyAsPicture;
        //   MyRange2 := FindInDoc(Book, ReplaceText [2]);

             ShpWrd2:= BookPicture.Range.InlineShapes;
             ShpWrd2.Item(i).select;
             WRD.selection.Copyaspicture;
             MyRange2 := FindInDoc(Book, ReplaceText [2]);

    if  VarIsClear(MyRange2) then begin
        ShowMessage('Текст 1##2 НЕ найден.');
        Exit;
    end;
 //     MyRange2.select;
     MyRange2.Paste;

    {

        //   BookPicture.Activate;
        // ShpWrd:= BookPicture.Range.InlineShapes.Item(i).Range;
         BookPicture.Range.InlineShapes.Item(i).Range.CopyAsPicture;
        // ShpWrd.CopyAsPicture;
         MyRange2 := FindInDoc(Book, ReplaceText [2]);

         if VarIsClear(MyRange2) then begin
            ShowMessage('Текст ##2 НЕ найден.');
            Exit;
         end;
       //  MyRange2.Select;     //xz
         MyRange2.Paste;
     }
         if i<4 then  MyRange2.InsertAfter(ReplaceText [2])  ;

       end;

   //*****************************************
    ProgBar:=50;
    Form1.ProgressBar1.Position := ProgBar ;
    Label2C:='вставил Акт, пихаю остальную лабуду из доки';
    Form1.Label2.Caption:=Label2C;
   //*****************************************

    for i:=5 to j  do
       begin
        //    j:=BookPicture.InlineShapes.Count;
        //   ShpWrd2:= BookPicture.Range.InlineShapes;
        //   ShpWrd:= ShpWrd2.Item(i).Range;
        //   ShpWrd.CopyAsPicture;
        //   MyRange2 := FindInDoc(Book, ReplaceText [2]);

             ShpWrd2:= BookPicture.Range.InlineShapes;
             ShpWrd2.Item(i).select;
             WRD.selection.Copyaspicture;
             MyRange2 := FindInDoc(Book, ReplaceText [3]);

    if  VarIsClear(MyRange2) then begin
        ShowMessage('Текст 1##3 НЕ найден.');
        Exit;
    end;
 //     MyRange2.select;
     MyRange2.Paste;

    {

        //   BookPicture.Activate;
        // ShpWrd:= BookPicture.Range.InlineShapes.Item(i).Range;
         BookPicture.Range.InlineShapes.Item(i).Range.CopyAsPicture;
        // ShpWrd.CopyAsPicture;
         MyRange2 := FindInDoc(Book, ReplaceText [2]);

         if VarIsClear(MyRange2) then begin
            ShowMessage('Текст ##2 НЕ найден.');
            Exit;
         end;
       //  MyRange2.Select;     //xz
         MyRange2.Paste;

     }

         if i=12 then
            begin
             ProgBar:=54;
             Form1.ProgressBar1.Position := ProgBar ;
             Label2C:='не ссы, работаю, пихаю...';
             Form1.Label2.Caption:=Label2C;
            end;

         if i<j then  MyRange2.InsertAfter(ReplaceText [3])  ;

       end;



          //****************************



 {
    for i:=5 to 100  do
       begin
         MyRange2 := FindInDoc(Book, ReplaceText [3]);

         if VarIsClear(MyRange2) then begin
            ShowMessage('Текст ##3 НЕ найден.');
            Exit;
         end;

         try
           BookPicture.Range.InlineShapes.Item(i).Range.CopyAsPicture;
         except
           break;
         end;
         MyRange2.Paste;
         MyRange2.InsertAfter(ReplaceText [3])  ;
       end;
    }
    //  ShowMessage(IntToStr(i));
   //   MyRange2 := FindInDoc(Book, ReplaceText [3]);
   //   MyRange2.text:=ReplaceText [4];
  // MyRange2.Paste;
  //    ShowMessage('енд ');


end;

//**** Процедура ищет из таблицы EXCEL название района               *****
//**** открывает документ WORD с обзором по заданной директрии       *****
//**** и вставляет в документ WORD отчета                            *****
 procedure InsertObzor;
 var
    DirObzor,ReplaceTextObzor : string;

 begin
      MyWorkSheet2:=MyBook.Sheets['Ввод'];
      RangeObzor:=MyWorkSheet2.Range['b22'];
      ObzorValue:= RangeObzor.Value;
    //ShowMessage(vartostr(ObzorValue));
      DirObzor:= 'Z:\GRAND NEVA\2014\ОБЗОРЫ районы\'+ObzorValue+' район.docx';
      BookObzor:=WRD.Documents.Open(DirObzor);
      BookObzor.Range.Copy;
      ReplaceTextObzor:='1###1';
      MyRange2 := FindInDoc(Book, ReplaceTextObzor);

         if VarIsClear(MyRange2) then begin
            ShowMessage('Текст 1###1 ReplaceTextObzor НЕ найден.');
            Exit;
         end;

  MyRange2.Paste;
 end;

 //**** Процедура вставляет рисунки аналогов из документа WORD    ****
 //****                 в документ отчета                         ****
 procedure InsertAnalogi;
  var
        DirAnalogDoc, ReplaceTextAnalog : string;

 begin

    DirAnalogDoc:= DIRFile+'аналоги.docx';
    BookAnalog:=WRD.Documents.Open(DirAnalogDoc);
    BookAnalog.Range.Copy;
    ReplaceTextAnalog:='1####1';
    MyRange2 := FindInDoc(Book, ReplaceTextAnalog);

         if VarIsClear(MyRange2) then begin
            ShowMessage('Текст 1####1 ReplaceTextAnalog НЕ найден.');
            Exit;
         end;

    MyRange2.Paste;

 end;

//**** Процедура вставляет рисунки местоположения из документа WORD      ****
//**** в документ отчета                                                 ****
  procedure InsertLocation;
  var
       i,j: Integer;
       DirLocationDoc  : string;
       ReplaceTextLoc : array [1..3] of string;

  begin
       ReplaceTextLoc [1]:='1#####1';
       ReplaceTextLoc [2]:='1#####2';
       ReplaceTextLoc [3]:='1#####3';


     DirLocationDoc:= DIRFile+'место.docx';
     BookLocation:=WRD.Documents.Open(DirLocationDoc);

   //  j:=BookLocation.InlineShapes.Count;
   //     ShowMessage(IntToStr(j));
       for i:=1 to 3  do
       begin

        //  BookLocation.InlineShapes.Item(1).Select;
        //  BookLocation.Selection.CopyAsPicture;
         //BookLocation.Range.InlineShapes.Item(i).Range.Copy;
        // BookLocation.Range.InlineShapes.Item(i).Range.CopyAsPicture;

             ShpWrd3:= BookLocation.Range.InlineShapes;
             ShpWrd3.Item(i).select;
             WRD.selection.Copyaspicture;

        //   Sleep(1000);
         MyRange2 := FindInDoc(Book, ReplaceTextLoc [i]);
         if VarIsClear(MyRange2) then begin
            ShowMessage('Текст 1####№ Location НЕ найден.');
            Exit;
         end;
        // Sleep(1000);
         MyRange2.Paste;
       end;

  end;

 //**** Запуск макроса на слияние документа с таблицей EXCEL    ****

   procedure MacroSli;

   begin
      Book.Activate;
      WRD.Run('Слияние');

   end;


   procedure ExeMacros;

    begin
     // MyBook.Activate;
      EXC.Run('ТаблКакРис');

    end;

 //**** Процедура закрывает документы WORD кроме отчета
   procedure CloseWordDocs;

   begin
    BookLocation.Close;
    BookAnalog.Close;
    BookObzor.Close;
    BookPicture.Close;
   end;

 //**** Процедура закрывает документ EXCEL
   procedure CloseExcel;

   begin
    EXC.DisplayAlerts := False;
    EXC.quit;

   end;




 //*****************************************************************************
 {
  procedure SaveWordDocs;

  begin

   NewWordDocDir:=DIRFName;
   Insert(ProgramName,NewWordDocDir,LengthDir+1);
   FileFormat:='wdFormatDocument';
    Book.Activate;
   Book.SaveAs(NewWordDocDir,FileFormat);

  end;
  }
  {
   procedure Proba;

   begin
    BookBlevantone:=WRD.Documents.Add;
    Book.Range.Copy;
    BookBlevantone.Range.Paste;

   end;
   }

//******************************************************************************

procedure TForm1.AuthorClick(Sender: TObject);
begin
ShowMessage('Автор проги Пичукан Айвар... В общем то неплохой программист.');
end;

procedure TForm1.WhatDoClick(Sender: TObject);
begin
ShowMessage(' Работает когда нажмешь кнопку');
end;

procedure TForm1.Button2Click(Sender: TObject);
begin
    ProgBar:=0;
    ProgressBar1.Position := ProgBar ;
     Label2C:='программа начала работу';
     Form1.Label2.Caption:=Label2C;

    StartWORD;

    ProgBar:=7;
    ProgressBar1.Position := ProgBar ;
    Label2C:='приложение WORD стартовало';
    Form1.Label2.Caption:=Label2C;

   if not OpenDialog1.Execute then Exit;  //тут открывается диалог выбора файла, и если пользователь нажал "Cancel", то выходим

    WRD.visible:=true;     //делаем Ворд видимым or not
    Book:= WRD.Documents.Open(OpenDialog1.FileName);
    MyRange2:=Book.Range;
  // WRD.visible:=false;     //делаем Ворд видимым or not

    DIRFName := OpenDialog1.FileName;    //Показывает директорию открытого файла
  //  ShowMessage(DIRFName);             // с именем и расширением


    DIRName:= DIRDetect;    // определяется директория с названием файла
 //   ShowMessage(DIRName);   // без расширения  но с точкой


  //  ShowMessage(DIRFileDetect);    // определяется директория папки без названия файла
    DIRFile:= DIRFileDetect;       //и присваивается переменной

      ProgBar:=10;
    ProgressBar1.Position := ProgBar ;
     Label2C:='документ WORD по выбранной директории открыт';
     Form1.Label2.Caption:=Label2C;

    StartExcel;

    Label2C:='приложение EXCEL стартовало';
    Form1.Label2.Caption:=Label2C;

    ActExcelOpenDoc;             //Запускаем и открываем EXCEL по заданной директории

     ProgBar:=12;
    ProgressBar1.Position := ProgBar ;
     Label2C:='документ EXCEL по выбранной директории открыт';
     Form1.Label2.Caption:=Label2C;

    ExeMacros;

    Label2C:='макрос EXCEL табл как рис выполнен';
    Form1.Label2.Caption:=Label2C;
    EXC.visible:=true;       //делаем Excel видимым
 // EXC.visible:=false;      //делаем Excel невидимым

      ProgBar:=17;
    ProgressBar1.Position := ProgBar ;

    TableAsPicturePaste(Book);

     ProgBar:=33;
    ProgressBar1.Position := ProgBar ;
    Label2C:='таблицы EXCEL вставлены, начинаю вставлять';
    Form1.Label2.Caption:=Label2C;


    InsertPictureWord(Book);

     ProgBar:=58;
    ProgressBar1.Position := ProgBar ;
    Label2C:='акт, доки, задание вставлены в WORD документ';
    Form1.Label2.Caption:=Label2C;

    InsertObzor ;

      ProgBar:=65;
    ProgressBar1.Position := ProgBar ;
    Label2C:='обзор района вставлены в WORD документ';
    Form1.Label2.Caption:=Label2C;

     CloseExcel;

     ProgBar:=33;
    ProgressBar1.Position := ProgBar ;
    Label2C:='закрыт EXCEL, начинаю вставлять аналоги';
    Form1.Label2.Caption:=Label2C;

    InsertAnalogi;

      ProgBar:=75;
    ProgressBar1.Position := ProgBar ;
    Label2C:='аналоги вставлены в WORD документ';
    Form1.Label2.Caption:=Label2C;

    InsertLocation;

     ProgBar:=85;
    ProgressBar1.Position := ProgBar ;
    Label2C:='картинки места вставлены в WORD документ';
    Form1.Label2.Caption:=Label2C;

    MacroSli;

     ProgBar:=90;
    ProgressBar1.Position := ProgBar ;
     Label2C:='слияние WORD и EXCEL выполнено';
    Form1.Label2.Caption:=Label2C;

    CloseWordDocs;

     ProgBar:=95;
    ProgressBar1.Position := ProgBar ;
     Label2C:='закрыты лишние документы WORD';
    Form1.Label2.Caption:=Label2C;


  WRD.visible:=true;     //делаем Ворд видимым

   ProgBar:=100;
    ProgressBar1.Position := ProgBar ;
    Label2C:='программа '+ProgramName+' завершена';
    Form1.Label2.Caption:=Label2C;

  ShowMessage('program '+ ProgramName + ' end');
  //Book.Range(1,10).Paste;

     ProgBar:=0;
    ProgressBar1.Position := ProgBar ;
     Label2C:='программа ожидает запуска';
    Form1.Label2.Caption:=Label2C;

end;


begin
   ProgramName:='Blevantone 1.0';
   ProgBar:=0;


  //    Form1.Label2.Caption:=Label2C;
  // TForm1.Caption:= ProgramName;














end.

